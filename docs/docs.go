// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/analytics/timeline/bac": {
            "get": {
                "description": "Calculate BAC for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Get BAC calculation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Weight in kg",
                        "name": "weight_kg",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gender",
                        "name": "gender",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time step in minutes",
                        "name": "time_step_mins",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.BACCalculationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and generate a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Retrieve the current user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get the current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserMeResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up a new user",
                "parameters": [
                    {
                        "description": "User signup request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UserSignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserSignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/drink-logs": {
            "get": {
                "description": "Retrieve all drink logs for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Get drink logs for the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.DrinkLogsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new drink log for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Create a drink log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Create drink log request",
                        "name": "drinkLog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateDrinkLogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateDrinkLogResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/drink-logs/parse": {
            "post": {
                "description": "Parse a drink log and return the drink option and confidence",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Parse a drink log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Parse drink log request",
                        "name": "drinkLog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ParseDrinkLogRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ParseDrinkLogResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/drink-options": {
            "get": {
                "description": "Retrieve all drink options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Get all drink options",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.DrinkOptionsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/drink-options/{id}": {
            "get": {
                "description": "Retrieve a specific drink option by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Get a specific drink option",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Drink option ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.DrinkOptionResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a specific drink option by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Update a drink option",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Drink option ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated drink option",
                        "name": "drinkOption",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateDrinkOptionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific drink option by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drinks"
                ],
                "summary": "Delete a drink option",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Drink option ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Similar to the http status code",
                    "type": "integer",
                    "x-order": "1",
                    "example": 400
                },
                "type": {
                    "description": "The type of error",
                    "type": "string",
                    "enum": [
                        "validation",
                        "database",
                        "entity"
                    ],
                    "x-order": "2",
                    "example": "validation"
                },
                "message": {
                    "description": "A human-readable error message",
                    "type": "string",
                    "x-order": "3",
                    "example": "Invalid request Body"
                },
                "details": {
                    "description": "Additional details about the error, omitted if empty",
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "x-order": "4"
                },
                "correlation_id": {
                    "description": "The error id from context traceId",
                    "type": "string",
                    "x-order": "5",
                    "example": "01234567890123456789012345678900"
                }
            }
        },
        "dtos.BACCalculationResponse": {
            "type": "object",
            "properties": {
                "summary": {
                    "$ref": "#/definitions/models.BACSummary"
                },
                "timeline": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BACPoint"
                    }
                }
            }
        },
        "dtos.CreateDrinkLogRequest": {
            "type": "object",
            "properties": {
                "drink_option_id": {
                    "type": "integer"
                },
                "logged_at": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateDrinkLogResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dtos.DrinkLogsResponse": {
            "type": "object",
            "properties": {
                "drink_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DrinkLog"
                    }
                }
            }
        },
        "dtos.DrinkOptionResponse": {
            "type": "object",
            "properties": {
                "drink_option": {
                    "$ref": "#/definitions/models.DrinkOption"
                }
            }
        },
        "dtos.DrinkOptionsResponse": {
            "type": "object",
            "properties": {
                "drink_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DrinkOption"
                    }
                }
            }
        },
        "dtos.ParseDrinkLogRequest": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "dtos.ParseDrinkLogResponse": {
            "type": "object",
            "properties": {
                "confidence": {
                    "type": "number"
                },
                "drink_option": {
                    "$ref": "#/definitions/models.DrinkOption"
                }
            }
        },
        "dtos.UpdateDrinkOptionRequest": {
            "type": "object",
            "required": [
                "abv",
                "name",
                "size_unit",
                "size_value",
                "type"
            ],
            "properties": {
                "abv": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "size_unit": {
                    "type": "string"
                },
                "size_value": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dtos.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dtos.UserLoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dtos.UserMeResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dtos.UserSignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dtos.UserSignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.BACPoint": {
            "type": "object",
            "properties": {
                "bac": {
                    "type": "number"
                },
                "is_over_bac": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/models.BACStatus"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.BACStatus": {
            "type": "string",
            "enum": [
                "Sober",
                "Minimal",
                "Light",
                "Mild",
                "Significant",
                "Severe",
                "Dangerous"
            ],
            "x-enum-varnames": [
                "BACStatusSober",
                "BACStatusMinimal",
                "BACStatusLight",
                "BACStatusMild",
                "BACStatusSignificant",
                "BACStatusSevere",
                "BACStatusDangerous"
            ]
        },
        "models.BACSummary": {
            "type": "object",
            "properties": {
                "drinking_since_time": {
                    "type": "string"
                },
                "duration_over_bac": {
                    "type": "integer"
                },
                "max_bac": {
                    "type": "number"
                },
                "max_bac_time": {
                    "type": "string"
                },
                "sober_since_time": {
                    "type": "string"
                },
                "total_drinks": {
                    "type": "integer"
                }
            }
        },
        "models.DrinkLog": {
            "type": "object",
            "properties": {
                "abv": {
                    "type": "number"
                },
                "drink_name": {
                    "type": "string"
                },
                "drink_option_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "logged_at": {
                    "type": "string"
                },
                "size_unit": {
                    "type": "string"
                },
                "size_value": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.DrinkOption": {
            "type": "object",
            "properties": {
                "abv": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size_unit": {
                    "type": "string"
                },
                "size_value": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Sober API",
	Description:      "API for the Sober app",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
