meta {
  name: Parse Drink Log Text
  type: http
  seq: 8
}

post {
  url: {{host}}/drink-logs/parse
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{auth_token}}
}

body {
  {
    "text": "had a small pale ale"
  }
}

tests {
  test("Should parse drink log text successfully", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.be.an("object");
    expect(res.body).to.have.property("drink_option");
    expect(res.body.drink_option).to.be.an("object");
    expect(res.body.drink_option).to.have.property("id");
    expect(res.body.drink_option).to.have.property("name");
    expect(res.body.drink_option.type).to.equal("beer");
    expect(res.body.drink_option.size_value).to.equal(25);
    expect(res.body.drink_option.size_unit).to.equal("cl");
    expect(res.body.drink_option.abv).to.equal(0.05);
  });
}

body {
  {
    "text": "had a small pale ale"
  }
}

tests {
  test("Should parse drink log text successfully", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.be.an("object");
    expect(res.body).to.have.property("drink_option");
    expect(res.body.drink_option).to.be.an("object");
    expect(res.body.drink_option).to.have.property("id");
    expect(res.body.drink_option).to.have.property("name");
    expect(res.body.drink_option.type).to.equal("beer");
    expect(res.body.drink_option.size_value).to.equal(25);
    expect(res.body.drink_option.size_unit).to.equal("cl");
    expect(res.body.drink_option.abv).to.equal(0.05);
  });
}

body {
  {
    "text": "drank a glass of wine"
  }
}

tests {
  test("Should parse drink log text successfully", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.be.an("object");
    expect(res.body).to.have.property("drink_option");
    expect(res.body.drink_option).to.be.an("object");
    expect(res.body.drink_option).to.have.property("id");
    expect(res.body.drink_option).to.have.property("name");
    expect(res.body.drink_option.type).to.equal("wine");
    expect(res.body.drink_option.size_value).to.equal(12);
    expect(res.body.drink_option.size_unit).to.equal("cl");
    expect(res.body.drink_option.abv).to.equal(0.12);
  });
}

body {
  {
    "text": "had 1 shot of vodka"
  }
}

tests {
  test("Should parse drink log text successfully", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.be.an("object");
    expect(res.body).to.have.property("drink_option");
    expect(res.body.drink_option).to.be.an("object");
    expect(res.body.drink_option).to.have.property("id");
    expect(res.body.drink_option).to.have.property("name");
    expect(res.body.drink_option.type).to.equal("cocktail");
    expect(res.body.drink_option.size_value).to.equal(10);
    expect(res.body.drink_option.size_unit).to.equal("cl");
    expect(res.body.drink_option.abv).to.equal(0.12);
  });
}

