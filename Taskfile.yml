version: "3"

dotenv: [".env"]

vars:
  BINARY_NAME: go-sober
  DB_PATH: db/sober.db
  DB_URL: sqlite3://{{.DB_PATH}}
  MIGRATIONS_PATH: file://db/migrations

tasks:
  default:
    cmds:
      - task --list

  run:
    desc: Run binary in development mode
    cmds:
      - go run main.go

  run:prod:
    desc: Run production binary
    cmds:
      - ./bin/{{.BINARY_NAME}}

  build:
    desc: Build binary for development
    cmds:
      - go build
    sources:
      - ./**/*.go
    generates:
      - "{{ .BINARY_NAME }}"

  build:prod:
    desc: Build production binary
    cmds:
      - go build -o bin/{{.BINARY_NAME}} -v main.go
    sources:
      - ./**/*.go
    generates:
      - bin/{{.BINARY_NAME}}

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -func=coverage.out
      - rm coverage.out

  test:bruno:
    desc: Run Bruno tests
    deps: [db:migrate]
    dir: bruno
    cmds:
      - bru run --env Local

  db:migrate:
    desc: Run database migrations
    cmds:
      - migrate -source {{.MIGRATIONS_PATH}} -database "{{.DB_URL}}" up

  db:rollback:
    desc: Rollback the last database migration
    cmds:
      - migrate -source {{.MIGRATIONS_PATH}} -database "{{.DB_URL}}" down 1

  db:drop:
    desc: Drop the database
    cmds:
      - rm {{.DB_PATH}} || true

  db:reset:
    desc: Reset the database
    deps: [db:drop]
    cmds:
      - task db:migrate

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.BINARY_NAME}} .

  docker:run:
    desc: Run Docker container
    deps: [docker:build]
    cmds:
      - docker run --name {{.BINARY_NAME}} -p 8080:8080 --env-file .env {{.BINARY_NAME}}
